package org.sample;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.Select;

import io.github.bonigarcia.wdm.WebDriverManager;
import javafx.util.Duration;

public class BaseClass {
	static WebDriver driver;
	static Select s;
static WebElement element;
	public WebDriver browserLaunch() {
		WebDriverManager.chromedriver().setup();
	
		ChromeOptions options=new ChromeOptions();
		options.addArguments("--remote-allow-origins=*");
		driver =new ChromeDriver(options);
		return driver;
	}
	public WebElement locatorid(WebElement element,String value) {
		element=driver.findElement(By.id(value));
		return element;
	}
	public void LoadUrl(String url) {
		driver.get(url);
	}
	public void maximizeWindow() {
		driver.manage().window().maximize();
	}
	public void minimizeWindow() {
		driver.manage().window().minimize();
	}
	public void currentUrl() {
		String currentUrl = driver.getCurrentUrl();
		System.out.println(currentUrl);
	}
	public void getTitle() {
		String title = driver.getTitle();
		System.out.println(title);
	}
	public void sendValue(WebElement txt,String stxt) {
	txt.sendKeys(stxt);
	}
	public void click(WebElement btn) {
	btn.click();
	}
	public void quitBrowser() {
		driver.quit();
	}

	public void getText(WebElement txt1) {
		String s = txt1.getText();
		System.out.println(s);
	}
	public void getAttribute(WebElement txt2) {
		String s1 = txt2.getAttribute("value");
		System.out.println("\nYour Hotel Booking was Successfully Done"
				+ "\nYour Order Id is  :"+s1);
	}
	public void selectByVisibleText(WebElement txt3,String s3) {
		s=new Select(txt3);
		s.selectByVisibleText(s3);
	}
	public void selectByvalue(WebElement txt4,String s4) {
		s=new Select(txt4);
		s.selectByValue(s4);
	}
	public void selectByIndex(WebElement txt5, int num) {
		s=new Select(txt5);
		s.selectByIndex(num);
	}
	public void scrollDownJs(WebElement element) {
	JavascriptExecutor js=(JavascriptExecutor)driver;
	js.executeScript("argument[0].scrollIntoView(true)", element);
	}
	public void scrollUpJs(WebElement element) {
		JavascriptExecutor js=(JavascriptExecutor)driver;
		js.executeScript("argument[0].scrollIntoView(false)", element);
		}
	public void setAttributeJs(WebElement element, String date) {
		JavascriptExecutor js=(JavascriptExecutor)driver;
		js.executeScript("argument[0].setAttribute('value',"+date+")", element);
		
	}
	public void acceptAlert() {
		Alert a= driver.switchTo().alert();
		a.accept();
	}
	public void dismissAlert() {
		Alert a= driver.switchTo().alert();
		a.dismiss();
	}
	public void enterAcceptAlert(String skey) {
		Alert a= driver.switchTo().alert();
		a.sendKeys(skey);
		a.accept();
	}
	public WebElement IdFE(String idValue) {
		return driver.findElement(By.id(idValue));
	}
	public WebElement nameFE(String nameValue) {
		return driver.findElement(By.name(nameValue));
	}
	public WebElement classNameFE(String classNameValue) {
		return driver.findElement(By.className(classNameValue));
	}
	public WebElement xpathFE(String xpathValue) {
		return driver.findElement(By.xpath(xpathValue));
	}
  	public String getData(String sheetname, int rowNo, int cellNo) throws IOException {
		String data=null;
		File f = new File("C:\\\\Users\\\\Admin\\\\Desktop\\\\ST\\\\Maven\\\\Excel\\\\AdactinData.xlsx");
		FileInputStream fis = new FileInputStream(f);
		Workbook w = new XSSFWorkbook(fis);
		Sheet st = w.getSheet(sheetname);
		Row r = st.getRow(rowNo);
		Cell c = r.getCell(cellNo);
		int type = c.getCellType();
		if(type==1) {
			data=c.getStringCellValue();
		}if(type==0) {
			if(DateUtil.isCellDateFormatted(c)) {
				Date date = c.getDateCellValue();
				SimpleDateFormat fr=new SimpleDateFormat("DD/MM/YY");
				data=fr.format(date);
			}else {
				double d = c.getNumericCellValue();
				long l=(long)d;
				data = String.valueOf(l);
			}
		}
		return data;
	}
}

